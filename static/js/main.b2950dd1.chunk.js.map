{"version":3,"sources":["components/Error.jsx","components/Formulario.jsx","components/Imagen.jsx","components/ListadoImg.jsx","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Formulario","setBusqueda","useState","termino","setTermino","error","setError","onSubmit","e","preventDefault","trim","type","placeholder","onChange","target","value","Imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","ListadoImg","imagenes","map","key","id","App","busqueda","setImagenes","paginaactual","setPaginaactual","totalpaginas","setTotalpaginas","useEffect","a","imagenesPorPagina","url","fetch","respuesta","json","resultado","hits","calcularTotalPaginas","Math","ceil","totalHits","document","querySelector","scrollIntoView","behavior","consultarAPI","onClick","nuevaPagActual","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b2950dd1.chunk.js","sourcesContent":["import React from 'react'\n\nconst Error = ({mensaje}) => {\n  return (  \n    <p className=\"my-3 p-4 text-center alert alert-primary\">{mensaje}</p>\n  );\n}\n \nexport default Error;","import React,{useState} from 'react'\nimport Error from './Error';\n\nconst Formulario = ({setBusqueda}) => {\n\n\n  //States\n  const [termino, setTermino] = useState('');\n  const [error, setError] = useState(false);\n\n  //Buscar imagenes\n  const buscarImagenes = e => {\n    e.preventDefault();\n    //Validar\n    if(termino.trim() === ''){\n      setError(true);\n      return;\n    }\n    setError(false);\n    //Enviar el termino al componente principal\n    setBusqueda(termino);\n\n  };\n\n\n\n  return (  \n    <form\n      onSubmit={buscarImagenes}\n    >\n      <div className=\"row\">\n        <div className=\"form-group col-md-8\">\n          <input \n            type=\"text\"\n            className=\"form-control form-control-lg\"\n            placeholder=\"Busca una imagen, ejemplo: futbol o cafe\"\n            onChange={e => setTermino(e.target.value)}\n          />\n        </div>\n        <div className=\"form-group col-md-4\">\n          <input \n            type=\"submit\"\n            className=\"btn btn-lg btn-danger btn-block\"\n          />\n        </div>\n      </div>\n\n      {error ? <Error mensaje=\"Agrega un termino de búsqueda\"/> : null}\n    </form>\n  );\n}\n \nexport default Formulario;","import React from 'react';\n\nconst Imagen = ({imagen}) => {\n\n  const {largeImageURL, likes, previewURL, tags, views} = imagen;\n  return (  \n    <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n      <div className=\"card\">\n        <img src={previewURL} alt={tags} className=\"card-img-top\"/>\n\n        <div className=\"card-body\">\n          <p className=\"card-text\">{likes} Me gusta</p>\n          <p className=\"card-text\">{views} Vistas</p>\n        </div>\n\n        <div className=\"card-footer\">\n          <a href={largeImageURL}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"btn btn-primary\"\n          >Ver Imagen</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n \nexport default Imagen;","import React from 'react';\nimport Imagen from './Imagen';\n\nconst ListadoImg = ({imagenes}) => {\n  return (  \n    <div className=\"col-12 p-5 row\">\n      {imagenes.map(imagen=>(\n        <Imagen \n          key={imagen.id}\n          imagen = {imagen}\n        />\n      ))}\n    </div>\n  );\n}\n \nexport default ListadoImg;","import React, {useState, useEffect} from 'react';\nimport Formulario from './components/Formulario';\nimport ListadoImg from './components/ListadoImg';\n\nfunction App() {\n\n  const [busqueda, setBusqueda] = useState('');\n  const [imagenes, setImagenes] = useState([]);\n  const [paginaactual, setPaginaactual] = useState(1);\n  const [totalpaginas, setTotalpaginas] = useState(5); \n  useEffect(() => {\n    \n    const consultarAPI = async () => {\n      if (busqueda === '') return ;\n\n      const imagenesPorPagina = 30;\n      const keyAPI = '18668697-f8419e50da9bd1a43cf0e81fd';\n      const url = `https://pixabay.com/api/?key=${keyAPI}&q=${busqueda}&per_page=${imagenesPorPagina}&page=${paginaactual}`;\n\n      const respuesta = await fetch(url);\n      const resultado = await respuesta.json();\n      setImagenes(resultado.hits);\n      \n      //Calcula el total e paginas\n      const calcularTotalPaginas = Math.ceil(resultado.totalHits / imagenesPorPagina);\n      setTotalpaginas(calcularTotalPaginas);\n      //Mueve pantalla hacia arriba\n      const jumbotron =document.querySelector('.jumbotron');\n      jumbotron.scrollIntoView({behavior: 'smooth'});\n    }\n    consultarAPI();\n  }, [busqueda, paginaactual])\n\n  const paginaAnterior = () =>{\n    const nuevaPagActual = paginaactual - 1;\n\n    if(nuevaPagActual === 0) return;\n    setPaginaactual(nuevaPagActual);\n  }\n  const paginaSiguiente = ()=>{\n    const nuevaPagActual = paginaactual + 1;\n    if(nuevaPagActual > totalpaginas) return;\n    setPaginaactual(nuevaPagActual);\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"jumbotron\">\n        <p className=\"lead text-center\">\n          Buscador de Imágenes\n        </p>\n        <Formulario\n          setBusqueda = {setBusqueda}\n        />\n        \n      </div>\n      <div className=\"row justify-content-center\">\n        <ListadoImg\n          imagenes={imagenes}\n        />\n        {(paginaactual === 1) ? null :\n          <button\n          type=\"button\"\n          className=\"btn btn-info mr-1\"\n          onClick={paginaAnterior}\n          >&laquo; Anterior </button>\n        }\n        {(paginaactual === totalpaginas) ? null :\n          <button\n          type=\"button\"\n          className=\"btn btn-info \"\n          onClick={paginaSiguiente}\n          >Siguiente &raquo;</button>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}